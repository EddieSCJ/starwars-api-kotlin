{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"<p>  Star Wars API   </p>","text":""},{"location":"#project-tooling","title":"<p> Project Tooling </p>","text":"\ud83d\udc3a Snyk  \ud83d\udd75\ufe0f SonarCloud  \u2602\ufe0f CodeCov"},{"location":"#requirements","title":"<p> Requirements </p>","text":"\u2615 Java 17  \ud83d\udc0b Docker   MongoDB"},{"location":"#project-source","title":"<p> Project Source </p>","text":"<p>This project is cloned from Github Star Wars API Java I'll keep forwarding with the previous pet project, but now using kotlin as a better language which also use the JVM platform.</p>"},{"location":"#description","title":"<p> Description </p>","text":"<p>This api is a simple wrapper for the Star Wars API where you can get information about the characters, planets, starships, vehicles, species, films, and more with a few extra features where you can handle this data however you need.</p> <p>The api also is documented with OpenAPI Swagger, so if you have any doubt, just open in your browser the follow url: <code>http://domain-you-are-using/api/v0/swagger-ui/index.html</code></p> <p>Please, read the content below to know how to use this api and if is there any doubt, please, contact me.</p>"},{"location":"pages/api-design/ecosystem/","title":"<p> API Ecosystem </p>","text":"<p>The ecosystem consists in everything that is related to the Star Wars API in terms of infra and devops.</p>"},{"location":"pages/api-design/ecosystem/#ecosystem","title":"<p> Ecosystem </p>","text":""},{"location":"pages/api-design/planets/","title":"<p> API Design </p>","text":"<p>The API design consists in the steps to being followed to use the Rest API, including <code>POST</code>, <code>GET</code>, <code>PUT</code> and <code>DELETE</code> operations</p> <p>The flow to be followed is drawn in the diagram in the next section.</p>"},{"location":"pages/api-design/planets/#saving-moneyrequests-strategy","title":"<p> Saving Money/Requests Strategy </p>","text":"<p>One of the main purposes of this API is to save requests to the SWAPI client using an own database, so, part of the flow is to know how much older the data can be since the last request, getting this info from the consumer of the API.</p> <p>Example 1: Imagine you need to know what is the climate of a certain planet, you also know that a climate doesn't change in a few days, so, you can ask to the API to have a planet which could have been already requested in the last 365 days, so, we'll search in a database a planet with at most 365 <code>cacheInDays</code>, if each request to the client costs $0.80 you will save $0.80 from every request in the last 365 days.</p> <p>But if there is no planet requested in the last 365 days, example, the last saved planet was requested and saved in 400 days ago, we will just request it to the client and save with the creation date as today, so, the cache in days will be 0 for today, and we'll return it.</p> <p>Example 2: Now imagine you want to know what is the number of movies a planet appeared, and for this, you need the most updated info, no space for errors or anything like this, so you can request a planet with 0 cache in days, knowing that, we will directly ask for the client to get the most recent info for you, but using a <code>cacheInDays</code> as 0, you will ever pay the $0.80 cents to request info directly from the client.</p>"},{"location":"pages/api-design/planets/#design","title":"<p> Design </p>","text":"<p>  Original Figma Design </p>"},{"location":"pages/api-design/planets/#contracts-and-flow","title":"<p> Contracts and Flow </p>","text":""},{"location":"pages/project/best_practices/","title":"<p> PR Advices </p>","text":"<p>You'll see that once you open a PR some checks will be made, they are all essential to be passed before you merge your branch, so, make sure they are all passing.</p> <p>One exception is snyk, which sometimes have some problems that can't be solved now, in this case you can just bypass.</p>"},{"location":"pages/project/best_practices/#best-practices","title":"<p> Best Practices </p>","text":""},{"location":"pages/project/best_practices/#branches-jira-issue-code-typename","title":"Branches: [Jira Issue Code] - type/name","text":"<p>**Ex.: **   <code>[CSDD-18] - feature/planet-creation    [CSDD-18] - hotfix/production-rollback    [CSDD-18] - bugfix/planet-creation</code></p>"},{"location":"pages/project/best_practices/#commits","title":"Commits","text":"<p>Model:</p> <pre><code>type: brief description\n- detailed description\n- detailed description\n</code></pre> <p>Ex.:</p> <pre><code>feature: create planet operations\n- Add planet operations contratct\n- Add post endpoint to create planets\n- Add update planet endpoint\n\nchore: create planet docker operations\n- Add dev environment to planets\n- Add dev tools: localstack and mongo to docker-compose\n- Add docker compose for testing\n\nrefactor: remove code smells\n- Remove public modifiers in tests\n- Make variables final\n</code></pre>"},{"location":"pages/project/setup/running/","title":"<p> Running </p>","text":"<p>You'll have two options to start the app, the first one you can run the app and environment together in a container.</p>"},{"location":"pages/project/setup/running/#1-run-in-console","title":"1. Run in console","text":"<p>If you want just run the app in your java environment without setup any IDE or tool, just run the following from the app root.</p> <pre><code>chmod +x ./scripts/developer-mode.sh\n\n./scripts/developer-mode.sh\n</code></pre>"},{"location":"pages/project/setup/running/#2-run-in-your-ide-or-text-editing-tool","title":"2. Run in your IDE or text editing tool","text":"<p>Once you need debug and see some application logs, or want to use an IDE like Intellij, we strongly recommend you to up the environment with localstack and mongodb and export the following variables to your IDE or any tool you are using.</p> <p>Environment Variables</p> <pre><code>MONGO_HOST=localhost\nMONGO_USER=admin\nMONGO_PASSWORD=password\nMONGO_PORT=27017\nMONGO_DB=starwars\nMONGO_CONTAINER_NAME=mongoservice\nAWS_SECRET_KEY=SECRET\nAWS_ACCESS_KEY=ACCESS\nAWS_REGION=us-east-1\nSNS_ENDPOINT=http://localhost:4566\nSQS_PLANET_DELETE_URL=http://localhost:4566/queue/planet-delete.fifo\nSQS_ENDPOINT=http://localhost:4566\nSWAPI_URL=https://swapi.dev/api\nENV=ENV\nAPI_PORT=8080\nPROFILE=dev\nMONGO_AUTH_SOURCE=admin\nKAFKA_BOOTSTRAP_ADDRESS=http://localhost:9093\n</code></pre> <p>Once you set it, just run the following command:</p> <pre><code>chmod +x ./scripts/cache-docker/mount-environment.sh\n\n./scripts/cache-docker/mount-environment.sh\n</code></pre> <p>After this, just start the app in your tool.</p>"},{"location":"pages/project/setup/testing/","title":"<p> Testing </p>","text":""},{"location":"pages/project/setup/testing/#1-run-tests-in-console","title":"1. Run Tests in console","text":"<p>Execute the following commands</p> <pre><code>chmod +x ./scripts/test-mode.sh\n\n./scripts/test-mode.sh\n</code></pre>"},{"location":"pages/project/setup/testing/#2-run-tests-in-your-ide-or-text-editing-tool","title":"2. Run Tests in your IDE or text editing tool","text":"<p>Export the following env vars to your tool:</p> <pre><code>MONGO_HOST=localhost\nMONGO_USER=admin\nMONGO_PASSWORD=password\nMONGO_PORT=27017\nMONGO_DB=starwars\nMONGO_CONTAINER_NAME=mongoservice\nAWS_SECRET_KEY=SECRET\nAWS_ACCESS_KEY=ACCESS\nAWS_REGION=us-east-1\nSNS_ENDPOINT=http://localhost:4566\nSQS_ENDPOINT=http://localhost:4566\nSQS_PLANET_DELETE_URL=http://localhost:4566/queue/planet-delete.fifo\nSWAPI_URL=https://swapi.dev/api\nENV=ENV\nAPI_PORT=8080\nPROFILE=test\nMONGO_AUTH_SOURCE=admin\nKAFKA_BOOTSTRAP_ADDRESS=http://localhost:9093\n</code></pre>"}]}